
drivers V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000c40  00000cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008000ba  008000ba  00000d2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002df1  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114c  00000000  00000000  00003ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001861  00000000  00000000  00005009  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c4  00000000  00000000  0000686c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017ca  00000000  00000000  00007230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002567  00000000  00000000  000089fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000af61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_1>
   8:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_2>
   c:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_7>
  20:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_8>
  24:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_9>
  28:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_10>
  2c:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_13>
  38:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__vector_14>
  3c:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_15>
  40:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3d       	cpi	r26, 0xDE	; 222
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 01 	call	0x290	; 0x290 <main>
  8a:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidSendCommand>:
		
	#endif
	
}
void LCD_voidSendCommand(u8 Copy_u8Command)
{	
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	//send command
	DIO_voidSetPinValue(LCD_RS,LOW);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW,LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
		_delay_ms(2);
		
	#else
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Command, 4));
  aa:	c4 fb       	bst	r28, 4
  ac:	44 27       	eor	r20, r20
  ae:	40 f9       	bld	r20, 0
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Command, 5));
  b8:	c5 fb       	bst	r28, 5
  ba:	44 27       	eor	r20, r20
  bc:	40 f9       	bld	r20, 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Command, 6));
  c6:	c6 fb       	bst	r28, 6
  c8:	44 27       	eor	r20, r20
  ca:	40 f9       	bld	r20, 0
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Command, 7));
  d4:	4c 2f       	mov	r20, r28
  d6:	44 1f       	adc	r20, r20
  d8:	44 27       	eor	r20, r20
  da:	44 1f       	adc	r20, r20
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
		
		//set clock
		DIO_voidSetPinValue(LCD_E,HIGH);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_voidSendCommand+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_voidSendCommand+0x66>
  f8:	00 00       	nop
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_voidSendCommand+0x76>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_voidSendCommand+0x7c>
 10e:	00 00       	nop
		_delay_ms(2);
		
		if (isInitFinished)
 110:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
 114:	88 23       	and	r24, r24
 116:	89 f1       	breq	.+98     	; 0x17a <LCD_voidSendCommand+0xe8>
		{
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Command, 0));
 118:	4c 2f       	mov	r20, r28
 11a:	41 70       	andi	r20, 0x01	; 1
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Command, 1));
 124:	c1 fb       	bst	r28, 1
 126:	44 27       	eor	r20, r20
 128:	40 f9       	bld	r20, 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Command, 2));
 132:	c2 fb       	bst	r28, 2
 134:	44 27       	eor	r20, r20
 136:	40 f9       	bld	r20, 0
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Command, 3));
 140:	c3 fb       	bst	r28, 3
 142:	44 27       	eor	r20, r20
 144:	40 f9       	bld	r20, 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
			
			//set clock
			DIO_voidSetPinValue(LCD_E,HIGH);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_voidSendCommand+0xca>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_voidSendCommand+0xd0>
 162:	00 00       	nop
			_delay_ms(2);
			DIO_voidSetPinValue(LCD_E,LOW);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_voidSendCommand+0xe0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_voidSendCommand+0xe6>
 178:	00 00       	nop
			_delay_ms(2);
		}
	#endif
	
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LCD_voidInit>:
#include "util/delay.h"

static u8 isInitFinished = 0;
void LCD_voidInit(void)
{
	DIO_voidSetPinDirection(LCD_RS,OUTPUT);
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW,OUTPUT);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E,OUTPUT);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
	#if MODE == EIGHT_BIT_MODE
		DIO_voidSetPortDirection(LCD_8_BIT_DATA_PORT , OUTPUT);
		
	#else
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D4,OUTPUT);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D5,OUTPUT);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D6,OUTPUT);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D7,OUTPUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	89 ef       	ldi	r24, 0xF9	; 249
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <LCD_voidInit+0x4c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_voidInit+0x56>
 1d4:	00 00       	nop

	#endif
	
	_delay_ms(40);
	LCD_voidSendCommand(FUNC_SET);
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_voidInit+0x62>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_voidInit+0x68>
 1e6:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(FUNC_SET);
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_voidInit+0x74>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_voidInit+0x7a>
 1f8:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(FUNC_SET);
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_voidInit+0x86>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_voidInit+0x8c>
 20a:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(0b00100000);
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_voidInit+0x98>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_voidInit+0x9e>
 21c:	00 00       	nop
	_delay_ms(2);
	isInitFinished = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
	LCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF);
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
	LCD_voidSendCommand(INCREMENT_CURSORMOVE);
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
	LCD_voidSendCommand(CLR_DISPLAY);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
	LCD_voidSendCommand(CURSOR_AT_HOME);
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 23c:	08 95       	ret

0000023e <LED_voidInit>:
 */ 
#include "../../MCAL/DIO/DIO_interface.h"
#include "LED_interface.h"

void LED_voidInit(LED_t* led){
	DIO_voidSetPinDirection(led->pin , led->port , OUTPUT);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	fc 01       	movw	r30, r24
 242:	61 81       	ldd	r22, Z+1	; 0x01
 244:	80 81       	ld	r24, Z
 246:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
 24a:	08 95       	ret

0000024c <LED_voidTurnOn>:
}
void LED_voidTurnOn(LED_t* led){
	DIO_voidSetPinValue(led->pin , led->port , HIGH);	
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	fc 01       	movw	r30, r24
 250:	61 81       	ldd	r22, Z+1	; 0x01
 252:	80 81       	ld	r24, Z
 254:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
 258:	08 95       	ret

0000025a <LED_voidTurnOff>:
}
void LED_voidTurnOff(LED_t* led){
	DIO_voidSetPinValue(led->pin , led->port , LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	61 81       	ldd	r22, Z+1	; 0x01
 260:	80 81       	ld	r24, Z
 262:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
 266:	08 95       	ret

00000268 <turnOffLeds>:
#include "HAL/LCD/LCD_interface.h"
#include "HAL/LED/LED_interface.h"
#include "MCAL/DIO/DIO_interface.h"

void turnOffLeds(LED_t* redLed ,LED_t* yellowLed ,LED_t* greenLed )
{
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	8b 01       	movw	r16, r22
 274:	ca 01       	movw	r24, r20
	LED_voidTurnOff(greenLed);
 276:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_voidTurnOff>
	LED_voidTurnOff(yellowLed);
 27a:	c8 01       	movw	r24, r16
 27c:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_voidTurnOff>
	LED_voidTurnOff(redLed);
 280:	ce 01       	movw	r24, r28
 282:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_voidTurnOff>
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <main>:
int main(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	60 97       	sbiw	r28, 0x10	; 16
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
	LED_t redLed = {.pin = 0 , .port = PORTA};
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	1a 82       	std	Y+2, r1	; 0x02
	LED_t yellowLed = {.pin = 1 , .port = PORTA};
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	8b 83       	std	Y+3, r24	; 0x03
 2ac:	1c 82       	std	Y+4, r1	; 0x04
	LED_t greenLed = {.pin = 2 , .port = PORTA};
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	8d 83       	std	Y+5, r24	; 0x05
 2b2:	1e 82       	std	Y+6, r1	; 0x06

	LED_voidInit(&redLed);
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_voidInit>
	LED_voidInit(&yellowLed);
 2bc:	ce 01       	movw	r24, r28
 2be:	03 96       	adiw	r24, 0x03	; 3
 2c0:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_voidInit>
	LED_voidInit(&greenLed);
 2c4:	ce 01       	movw	r24, r28
 2c6:	05 96       	adiw	r24, 0x05	; 5
 2c8:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_voidInit>

    /* Replace with your application code */
	USART_voidInit(TRANSMIT_RECIEVE , ASYNCRONOUS , EIGHT_BITS , DISAPLED , TWO_STOP_BIT , 2400);
 2cc:	0f 2e       	mov	r0, r31
 2ce:	f0 e6       	ldi	r31, 0x60	; 96
 2d0:	ef 2e       	mov	r14, r31
 2d2:	f9 e0       	ldi	r31, 0x09	; 9
 2d4:	ff 2e       	mov	r15, r31
 2d6:	f0 2d       	mov	r31, r0
 2d8:	01 e0       	ldi	r16, 0x01	; 1
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	43 e0       	ldi	r20, 0x03	; 3
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 08 05 	call	0xa10	; 0xa10 <USART_voidInit>
	LCD_voidInit();
 2e6:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_voidInit>
		SPI_voidMasterTransmit(i);
		_delay_ms(100);
	}
	*/
	u8 string[10];
	u8 i = 0;
 2ea:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		u8 data = USART_u8RecieveData();
 2ec:	0e 94 5c 05 	call	0xab8	; 0xab8 <USART_u8RecieveData>
		// if backspace
		if (data == 0x08)
 2f0:	88 30       	cpi	r24, 0x08	; 8
 2f2:	11 f4       	brne	.+4      	; 0x2f8 <main+0x68>
			i--;
 2f4:	11 50       	subi	r17, 0x01	; 1
 2f6:	0a c0       	rjmp	.+20     	; 0x30c <main+0x7c>
		// add data if it is not enter
		else if (data != '\r')	
 2f8:	8d 30       	cpi	r24, 0x0D	; 13
 2fa:	41 f0       	breq	.+16     	; 0x30c <main+0x7c>
			string[i++] = data;
 2fc:	e7 e0       	ldi	r30, 0x07	; 7
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	e1 0f       	add	r30, r17
 306:	f1 1d       	adc	r31, r1
 308:	80 83       	st	Z, r24
 30a:	1f 5f       	subi	r17, 0xFF	; 255
		if (data == '\r' && string[0] != NULL)
 30c:	8d 30       	cpi	r24, 0x0D	; 13
 30e:	71 f7       	brne	.-36     	; 0x2ec <main+0x5c>
 310:	8f 81       	ldd	r24, Y+7	; 0x07
 312:	88 23       	and	r24, r24
 314:	59 f3       	breq	.-42     	; 0x2ec <main+0x5c>
		{
			turnOffLeds(&redLed ,&yellowLed , &greenLed);
 316:	ae 01       	movw	r20, r28
 318:	4b 5f       	subi	r20, 0xFB	; 251
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	be 01       	movw	r22, r28
 31e:	6d 5f       	subi	r22, 0xFD	; 253
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 34 01 	call	0x268	; 0x268 <turnOffLeds>
			if (strcmp(string ,"START") == 0)
 32a:	60 e6       	ldi	r22, 0x60	; 96
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	ce 01       	movw	r24, r28
 330:	07 96       	adiw	r24, 0x07	; 7
 332:	0e 94 15 06 	call	0xc2a	; 0xc2a <strcmp>
 336:	89 2b       	or	r24, r25
 338:	49 f4       	brne	.+18     	; 0x34c <main+0xbc>
			{
				LED_voidTurnOn(&greenLed);
 33a:	ce 01       	movw	r24, r28
 33c:	05 96       	adiw	r24, 0x05	; 5
 33e:	0e 94 26 01 	call	0x24c	; 0x24c <LED_voidTurnOn>
				USART_voidTransmitString("Green Led is turned on");
 342:	86 e6       	ldi	r24, 0x66	; 102
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_voidTransmitString>
 34a:	2e c0       	rjmp	.+92     	; 0x3a8 <main+0x118>
			}else if(strcmp(string ,"STOP") == 0)
 34c:	6d e7       	ldi	r22, 0x7D	; 125
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	ce 01       	movw	r24, r28
 352:	07 96       	adiw	r24, 0x07	; 7
 354:	0e 94 15 06 	call	0xc2a	; 0xc2a <strcmp>
 358:	89 2b       	or	r24, r25
 35a:	49 f4       	brne	.+18     	; 0x36e <main+0xde>
			{
				LED_voidTurnOn(&redLed);
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	0e 94 26 01 	call	0x24c	; 0x24c <LED_voidTurnOn>
				USART_voidTransmitString("Red Led is turned on");
 364:	82 e8       	ldi	r24, 0x82	; 130
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_voidTransmitString>
 36c:	1d c0       	rjmp	.+58     	; 0x3a8 <main+0x118>
			}else if (strcmp(string ,"WAIT") == 0)
 36e:	67 e9       	ldi	r22, 0x97	; 151
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	ce 01       	movw	r24, r28
 374:	07 96       	adiw	r24, 0x07	; 7
 376:	0e 94 15 06 	call	0xc2a	; 0xc2a <strcmp>
 37a:	89 2b       	or	r24, r25
 37c:	49 f4       	brne	.+18     	; 0x390 <main+0x100>
			{
				LED_voidTurnOn(&yellowLed);
 37e:	ce 01       	movw	r24, r28
 380:	03 96       	adiw	r24, 0x03	; 3
 382:	0e 94 26 01 	call	0x24c	; 0x24c <LED_voidTurnOn>
				USART_voidTransmitString("Yellow Led is turned on");
 386:	8c e9       	ldi	r24, 0x9C	; 156
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_voidTransmitString>
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <main+0x118>
			}else if (strcmp(string ,"AT") == 0)
 390:	64 eb       	ldi	r22, 0xB4	; 180
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	ce 01       	movw	r24, r28
 396:	07 96       	adiw	r24, 0x07	; 7
 398:	0e 94 15 06 	call	0xc2a	; 0xc2a <strcmp>
 39c:	89 2b       	or	r24, r25
 39e:	21 f4       	brne	.+8      	; 0x3a8 <main+0x118>
			{
				USART_voidTransmitString("OK");
 3a0:	87 eb       	ldi	r24, 0xB7	; 183
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_voidTransmitString>
			}
			// clear string
			memset(string, 0, sizeof(string));
 3a8:	fe 01       	movw	r30, r28
 3aa:	37 96       	adiw	r30, 0x07	; 7
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	df 01       	movw	r26, r30
 3b0:	1d 92       	st	X+, r1
 3b2:	8a 95       	dec	r24
 3b4:	e9 f7       	brne	.-6      	; 0x3b0 <main+0x120>
			i = 0;
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	99 cf       	rjmp	.-206    	; 0x2ec <main+0x5c>

000003ba <ADC_voidStartConversion>:
	//enable ADC interrupt
	SET_BIT(ADCSRA_REG , 3);
	// enable GIE
	SET_BIT(SREG_REG,7);
	ADC_callback = callback;
	ADC_voidStartConversion(channel);
 3ba:	cf 93       	push	r28
 3bc:	c8 2f       	mov	r28, r24
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinDirection>
 3c6:	87 b1       	in	r24, 0x07	; 7
 3c8:	80 7e       	andi	r24, 0xE0	; 224
 3ca:	87 b9       	out	0x07, r24	; 7
 3cc:	87 b1       	in	r24, 0x07	; 7
 3ce:	8c 2b       	or	r24, r28
 3d0:	87 b9       	out	0x07, r24	; 7
 3d2:	86 b1       	in	r24, 0x06	; 6
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	86 b9       	out	0x06, r24	; 6
 3d8:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <adcChannel>
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <__vector_16>:
};

void ADC_ISR_VECTOR(void)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
	if (ADC_callback != 0)
 402:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <ADC_callback>
 406:	f0 91 be 00 	lds	r31, 0x00BE	; 0x8000be <ADC_callback+0x1>
 40a:	30 97       	sbiw	r30, 0x00	; 0
 40c:	71 f0       	breq	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		ADC_callback(ADCHL_REG);
 40e:	84 b1       	in	r24, 0x04	; 4
 410:	95 b1       	in	r25, 0x05	; 5
 412:	09 95       	icall
		SET_BIT(ADCSRA_REG , 4);
 414:	86 b1       	in	r24, 0x06	; 6
 416:	80 61       	ori	r24, 0x10	; 16
 418:	86 b9       	out	0x06, r24	; 6
		if (adcMode == ADC_MODE_COUNTINOUS_CONVERSION)
 41a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <adcMode>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	21 f4       	brne	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			ADC_voidStartConversion(adcChannel);
 422:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <adcChannel>
 426:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_voidStartConversion>
		}
	}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <CLOCK_u32GetSystemClock>:
	__asm__ volatile("NOP");
}

u32 CLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	72 e1       	ldi	r23, 0x12	; 18
 450:	8a e7       	ldi	r24, 0x7A	; 122
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	08 95       	ret

00000456 <DIO_voidSetPinDirection>:
			DDRD_REG=0x00;
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
		{
			PORTD_REG=0xFF;
			DDRD_REG=0x00;
 456:	61 30       	cpi	r22, 0x01	; 1
 458:	e1 f1       	breq	.+120    	; 0x4d2 <DIO_voidSetPinDirection+0x7c>
 45a:	38 f0       	brcs	.+14     	; 0x46a <DIO_voidSetPinDirection+0x14>
 45c:	62 30       	cpi	r22, 0x02	; 2
 45e:	09 f4       	brne	.+2      	; 0x462 <DIO_voidSetPinDirection+0xc>
 460:	6c c0       	rjmp	.+216    	; 0x53a <DIO_voidSetPinDirection+0xe4>
 462:	63 30       	cpi	r22, 0x03	; 3
 464:	09 f4       	brne	.+2      	; 0x468 <DIO_voidSetPinDirection+0x12>
 466:	9d c0       	rjmp	.+314    	; 0x5a2 <DIO_voidSetPinDirection+0x14c>
 468:	08 95       	ret
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	69 f4       	brne	.+26     	; 0x488 <DIO_voidSetPinDirection+0x32>
 46e:	4a b3       	in	r20, 0x1a	; 26
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_voidSetPinDirection+0x26>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_voidSetPinDirection+0x22>
 480:	cb 01       	movw	r24, r22
 482:	84 2b       	or	r24, r20
 484:	8a bb       	out	0x1a, r24	; 26
 486:	08 95       	ret
 488:	41 11       	cpse	r20, r1
 48a:	0e c0       	rjmp	.+28     	; 0x4a8 <DIO_voidSetPinDirection+0x52>
 48c:	4a b3       	in	r20, 0x1a	; 26
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	b9 01       	movw	r22, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_voidSetPinDirection+0x44>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	8a 95       	dec	r24
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_voidSetPinDirection+0x40>
 49e:	cb 01       	movw	r24, r22
 4a0:	80 95       	com	r24
 4a2:	84 23       	and	r24, r20
 4a4:	8a bb       	out	0x1a, r24	; 26
 4a6:	08 95       	ret
 4a8:	42 30       	cpi	r20, 0x02	; 2
 4aa:	09 f0       	breq	.+2      	; 0x4ae <DIO_voidSetPinDirection+0x58>
 4ac:	ac c0       	rjmp	.+344    	; 0x606 <DIO_voidSetPinDirection+0x1b0>
 4ae:	4b b3       	in	r20, 0x1b	; 27
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	b9 01       	movw	r22, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_voidSetPinDirection+0x66>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	8a 95       	dec	r24
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_voidSetPinDirection+0x62>
 4c0:	cb 01       	movw	r24, r22
 4c2:	94 2f       	mov	r25, r20
 4c4:	98 2b       	or	r25, r24
 4c6:	9b bb       	out	0x1b, r25	; 27
 4c8:	9a b3       	in	r25, 0x1a	; 26
 4ca:	80 95       	com	r24
 4cc:	89 23       	and	r24, r25
 4ce:	8a bb       	out	0x1a, r24	; 26
 4d0:	08 95       	ret
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	69 f4       	brne	.+26     	; 0x4f0 <DIO_voidSetPinDirection+0x9a>
 4d6:	47 b3       	in	r20, 0x17	; 23
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	b9 01       	movw	r22, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_voidSetPinDirection+0x8e>
 4e0:	66 0f       	add	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	8a 95       	dec	r24
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_voidSetPinDirection+0x8a>
 4e8:	cb 01       	movw	r24, r22
 4ea:	84 2b       	or	r24, r20
 4ec:	87 bb       	out	0x17, r24	; 23
 4ee:	08 95       	ret
 4f0:	41 11       	cpse	r20, r1
 4f2:	0e c0       	rjmp	.+28     	; 0x510 <DIO_voidSetPinDirection+0xba>
 4f4:	47 b3       	in	r20, 0x17	; 23
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	b9 01       	movw	r22, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_voidSetPinDirection+0xac>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_voidSetPinDirection+0xa8>
 506:	cb 01       	movw	r24, r22
 508:	80 95       	com	r24
 50a:	84 23       	and	r24, r20
 50c:	87 bb       	out	0x17, r24	; 23
 50e:	08 95       	ret
 510:	42 30       	cpi	r20, 0x02	; 2
 512:	09 f0       	breq	.+2      	; 0x516 <DIO_voidSetPinDirection+0xc0>
 514:	78 c0       	rjmp	.+240    	; 0x606 <DIO_voidSetPinDirection+0x1b0>
 516:	48 b3       	in	r20, 0x18	; 24
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidSetPinDirection+0xce>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidSetPinDirection+0xca>
 528:	cb 01       	movw	r24, r22
 52a:	94 2f       	mov	r25, r20
 52c:	98 2b       	or	r25, r24
 52e:	98 bb       	out	0x18, r25	; 24
 530:	97 b3       	in	r25, 0x17	; 23
 532:	80 95       	com	r24
 534:	89 23       	and	r24, r25
 536:	87 bb       	out	0x17, r24	; 23
 538:	08 95       	ret
 53a:	41 30       	cpi	r20, 0x01	; 1
 53c:	69 f4       	brne	.+26     	; 0x558 <DIO_voidSetPinDirection+0x102>
 53e:	44 b3       	in	r20, 0x14	; 20
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_voidSetPinDirection+0xf6>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_voidSetPinDirection+0xf2>
 550:	cb 01       	movw	r24, r22
 552:	84 2b       	or	r24, r20
 554:	84 bb       	out	0x14, r24	; 20
 556:	08 95       	ret
 558:	41 11       	cpse	r20, r1
 55a:	0e c0       	rjmp	.+28     	; 0x578 <DIO_voidSetPinDirection+0x122>
 55c:	44 b3       	in	r20, 0x14	; 20
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_voidSetPinDirection+0x114>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_voidSetPinDirection+0x110>
 56e:	cb 01       	movw	r24, r22
 570:	80 95       	com	r24
 572:	84 23       	and	r24, r20
 574:	84 bb       	out	0x14, r24	; 20
 576:	08 95       	ret
 578:	42 30       	cpi	r20, 0x02	; 2
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_voidSetPinDirection+0x128>
 57c:	44 c0       	rjmp	.+136    	; 0x606 <DIO_voidSetPinDirection+0x1b0>
 57e:	45 b3       	in	r20, 0x15	; 21
 580:	21 e0       	ldi	r18, 0x01	; 1
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	b9 01       	movw	r22, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_voidSetPinDirection+0x136>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	8a 95       	dec	r24
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_voidSetPinDirection+0x132>
 590:	cb 01       	movw	r24, r22
 592:	94 2f       	mov	r25, r20
 594:	98 2b       	or	r25, r24
 596:	95 bb       	out	0x15, r25	; 21
 598:	94 b3       	in	r25, 0x14	; 20
 59a:	80 95       	com	r24
 59c:	89 23       	and	r24, r25
 59e:	84 bb       	out	0x14, r24	; 20
 5a0:	08 95       	ret
 5a2:	41 30       	cpi	r20, 0x01	; 1
 5a4:	69 f4       	brne	.+26     	; 0x5c0 <DIO_voidSetPinDirection+0x16a>
 5a6:	41 b3       	in	r20, 0x11	; 17
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	b9 01       	movw	r22, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_voidSetPinDirection+0x15e>
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_voidSetPinDirection+0x15a>
 5b8:	cb 01       	movw	r24, r22
 5ba:	84 2b       	or	r24, r20
 5bc:	81 bb       	out	0x11, r24	; 17
 5be:	08 95       	ret
 5c0:	41 11       	cpse	r20, r1
 5c2:	0e c0       	rjmp	.+28     	; 0x5e0 <DIO_voidSetPinDirection+0x18a>
 5c4:	41 b3       	in	r20, 0x11	; 17
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_voidSetPinDirection+0x17c>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_voidSetPinDirection+0x178>
 5d6:	cb 01       	movw	r24, r22
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	81 bb       	out	0x11, r24	; 17
 5de:	08 95       	ret
 5e0:	42 30       	cpi	r20, 0x02	; 2
 5e2:	89 f4       	brne	.+34     	; 0x606 <DIO_voidSetPinDirection+0x1b0>
 5e4:	42 b3       	in	r20, 0x12	; 18
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	b9 01       	movw	r22, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_voidSetPinDirection+0x19c>
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	8a 95       	dec	r24
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_voidSetPinDirection+0x198>
 5f6:	cb 01       	movw	r24, r22
 5f8:	94 2f       	mov	r25, r20
 5fa:	98 2b       	or	r25, r24
 5fc:	92 bb       	out	0x12, r25	; 18
 5fe:	91 b3       	in	r25, 0x11	; 17
 600:	80 95       	com	r24
 602:	89 23       	and	r24, r25
 604:	81 bb       	out	0x11, r24	; 17
 606:	08 95       	ret

00000608 <DIO_voidSetPinValue>:

}

void DIO_voidSetPinValue (u8 Copy_u8PinNumber, DIO_PORT_t DIO_port, u8 Copy_u8Value)
{
	switch (DIO_port)
 608:	61 30       	cpi	r22, 0x01	; 1
 60a:	39 f1       	breq	.+78     	; 0x65a <DIO_voidSetPinValue+0x52>
 60c:	38 f0       	brcs	.+14     	; 0x61c <DIO_voidSetPinValue+0x14>
 60e:	62 30       	cpi	r22, 0x02	; 2
 610:	09 f4       	brne	.+2      	; 0x614 <DIO_voidSetPinValue+0xc>
 612:	42 c0       	rjmp	.+132    	; 0x698 <DIO_voidSetPinValue+0x90>
 614:	63 30       	cpi	r22, 0x03	; 3
 616:	09 f4       	brne	.+2      	; 0x61a <DIO_voidSetPinValue+0x12>
 618:	5e c0       	rjmp	.+188    	; 0x6d6 <DIO_voidSetPinValue+0xce>
 61a:	08 95       	ret
	{
		case PORTA:
			if( Copy_u8Value == HIGH)
 61c:	41 30       	cpi	r20, 0x01	; 1
 61e:	69 f4       	brne	.+26     	; 0x63a <DIO_voidSetPinValue+0x32>
			{
				SET_BIT(PORTA_REG , Copy_u8PinNumber);
 620:	4b b3       	in	r20, 0x1b	; 27
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	b9 01       	movw	r22, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_voidSetPinValue+0x26>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_voidSetPinValue+0x22>
 632:	cb 01       	movw	r24, r22
 634:	84 2b       	or	r24, r20
 636:	8b bb       	out	0x1b, r24	; 27
 638:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 63a:	41 11       	cpse	r20, r1
 63c:	6a c0       	rjmp	.+212    	; 0x712 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTA_REG , Copy_u8PinNumber);
 63e:	4b b3       	in	r20, 0x1b	; 27
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	b9 01       	movw	r22, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_voidSetPinValue+0x44>
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_voidSetPinValue+0x40>
 650:	cb 01       	movw	r24, r22
 652:	80 95       	com	r24
 654:	84 23       	and	r24, r20
 656:	8b bb       	out	0x1b, r24	; 27
 658:	08 95       	ret
			}
			break;

		case PORTB:
			if(Copy_u8Value == HIGH)
 65a:	41 30       	cpi	r20, 0x01	; 1
 65c:	69 f4       	brne	.+26     	; 0x678 <DIO_voidSetPinValue+0x70>
			{
				SET_BIT(PORTB_REG , Copy_u8PinNumber);
 65e:	48 b3       	in	r20, 0x18	; 24
 660:	21 e0       	ldi	r18, 0x01	; 1
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	b9 01       	movw	r22, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_voidSetPinValue+0x64>
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	8a 95       	dec	r24
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_voidSetPinValue+0x60>
 670:	cb 01       	movw	r24, r22
 672:	84 2b       	or	r24, r20
 674:	88 bb       	out	0x18, r24	; 24
 676:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 678:	41 11       	cpse	r20, r1
 67a:	4b c0       	rjmp	.+150    	; 0x712 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTB_REG , Copy_u8PinNumber);
 67c:	48 b3       	in	r20, 0x18	; 24
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	b9 01       	movw	r22, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_voidSetPinValue+0x82>
 686:	66 0f       	add	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_voidSetPinValue+0x7e>
 68e:	cb 01       	movw	r24, r22
 690:	80 95       	com	r24
 692:	84 23       	and	r24, r20
 694:	88 bb       	out	0x18, r24	; 24
 696:	08 95       	ret
			}
			break;

		case PORTC:

			if( Copy_u8Value == HIGH)
 698:	41 30       	cpi	r20, 0x01	; 1
 69a:	69 f4       	brne	.+26     	; 0x6b6 <DIO_voidSetPinValue+0xae>
			{
				SET_BIT(PORTC_REG , Copy_u8PinNumber);
 69c:	45 b3       	in	r20, 0x15	; 21
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	b9 01       	movw	r22, r18
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_voidSetPinValue+0xa2>
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_voidSetPinValue+0x9e>
 6ae:	cb 01       	movw	r24, r22
 6b0:	84 2b       	or	r24, r20
 6b2:	85 bb       	out	0x15, r24	; 21
 6b4:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 6b6:	41 11       	cpse	r20, r1
 6b8:	2c c0       	rjmp	.+88     	; 0x712 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTC_REG , Copy_u8PinNumber);
 6ba:	45 b3       	in	r20, 0x15	; 21
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	b9 01       	movw	r22, r18
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_voidSetPinValue+0xc0>
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	8a 95       	dec	r24
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_voidSetPinValue+0xbc>
 6cc:	cb 01       	movw	r24, r22
 6ce:	80 95       	com	r24
 6d0:	84 23       	and	r24, r20
 6d2:	85 bb       	out	0x15, r24	; 21
 6d4:	08 95       	ret
			}
			break;

		case PORTD:

			if( Copy_u8Value == HIGH)
 6d6:	41 30       	cpi	r20, 0x01	; 1
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <DIO_voidSetPinValue+0xec>
			{
				SET_BIT(PORTD_REG , Copy_u8PinNumber);
 6da:	42 b3       	in	r20, 0x12	; 18
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	b9 01       	movw	r22, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_voidSetPinValue+0xe0>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	8a 95       	dec	r24
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_voidSetPinValue+0xdc>
 6ec:	cb 01       	movw	r24, r22
 6ee:	84 2b       	or	r24, r20
 6f0:	82 bb       	out	0x12, r24	; 18
 6f2:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 6f4:	41 11       	cpse	r20, r1
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTD_REG , Copy_u8PinNumber);
 6f8:	42 b3       	in	r20, 0x12	; 18
 6fa:	21 e0       	ldi	r18, 0x01	; 1
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	b9 01       	movw	r22, r18
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_voidSetPinValue+0xfe>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	8a 95       	dec	r24
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_voidSetPinValue+0xfa>
 70a:	cb 01       	movw	r24, r22
 70c:	80 95       	com	r24
 70e:	84 23       	and	r24, r20
 710:	82 bb       	out	0x12, r24	; 18
 712:	08 95       	ret

00000714 <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
 714:	1f 92       	push	r1
 716:	0f 92       	push	r0
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	2f 93       	push	r18
 720:	3f 93       	push	r19
 722:	4f 93       	push	r20
 724:	5f 93       	push	r21
 726:	6f 93       	push	r22
 728:	7f 93       	push	r23
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	ef 93       	push	r30
 734:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
 736:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <EXTI_voidCallBacks>
 73a:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <EXTI_voidCallBacks+0x1>
 73e:	30 97       	sbiw	r30, 0x00	; 0
 740:	09 f0       	breq	.+2      	; 0x744 <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
 742:	09 95       	icall
	}
}
 744:	ff 91       	pop	r31
 746:	ef 91       	pop	r30
 748:	bf 91       	pop	r27
 74a:	af 91       	pop	r26
 74c:	9f 91       	pop	r25
 74e:	8f 91       	pop	r24
 750:	7f 91       	pop	r23
 752:	6f 91       	pop	r22
 754:	5f 91       	pop	r21
 756:	4f 91       	pop	r20
 758:	3f 91       	pop	r19
 75a:	2f 91       	pop	r18
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	0f 90       	pop	r0
 762:	1f 90       	pop	r1
 764:	18 95       	reti

00000766 <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	2f 93       	push	r18
 772:	3f 93       	push	r19
 774:	4f 93       	push	r20
 776:	5f 93       	push	r21
 778:	6f 93       	push	r22
 77a:	7f 93       	push	r23
 77c:	8f 93       	push	r24
 77e:	9f 93       	push	r25
 780:	af 93       	push	r26
 782:	bf 93       	push	r27
 784:	ef 93       	push	r30
 786:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
 788:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <EXTI_voidCallBacks+0x2>
 78c:	f0 91 c2 00 	lds	r31, 0x00C2	; 0x8000c2 <EXTI_voidCallBacks+0x3>
 790:	30 97       	sbiw	r30, 0x00	; 0
 792:	09 f0       	breq	.+2      	; 0x796 <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
 794:	09 95       	icall
	}
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	18 95       	reti

000007b8 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
 7da:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <EXTI_voidCallBacks+0x4>
 7de:	f0 91 c4 00 	lds	r31, 0x00C4	; 0x8000c4 <EXTI_voidCallBacks+0x5>
 7e2:	30 97       	sbiw	r30, 0x00	; 0
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
 7e6:	09 95       	icall
	}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <__vector_11>:
	SoftwarePWM_dutyCycle = dutyCycle;
	OCR0_REG = 100;
	isSoftwarePWMMode = 1;
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
}
void TIMER0_ISR_VECTOR_OVERFLOW(void){
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
 82c:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <TIMER0_callBacks>
 830:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <TIMER0_callBacks+0x1>
 834:	30 97       	sbiw	r30, 0x00	; 0
 836:	09 f0       	breq	.+2      	; 0x83a <__vector_11+0x30>
		TIMER0_callBacks[0]();
 838:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
 83a:	88 b7       	in	r24, 0x38	; 56
 83c:	81 60       	ori	r24, 0x01	; 1
 83e:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
 840:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <storedPreload>
 844:	82 bf       	out	0x32, r24	; 50
}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	if (isSoftwarePWMMode)
 88a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <isSoftwarePWMMode>
 88e:	88 23       	and	r24, r24
 890:	f1 f0       	breq	.+60     	; 0x8ce <__vector_10+0x66>
	{
		SoftwarePWM_counter++;
 892:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <SoftwarePWM_counter>
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
 89c:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <SoftwarePWM_dutyCycle>
 8a0:	89 17       	cp	r24, r25
 8a2:	38 f0       	brcs	.+14     	; 0x8b2 <__vector_10+0x4a>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	60 91 c8 00 	lds	r22, 0x00C8	; 0x8000c8 <SoftwarePWM_PORT>
 8aa:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <SoftwarePWM_PIN>
 8ae:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
 8b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <SoftwarePWM_counter>
 8b6:	84 36       	cpi	r24, 0x64	; 100
 8b8:	88 f0       	brcs	.+34     	; 0x8dc <__vector_10+0x74>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	60 91 c8 00 	lds	r22, 0x00C8	; 0x8000c8 <SoftwarePWM_PORT>
 8c0:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <SoftwarePWM_PIN>
 8c4:	0e 94 04 03 	call	0x608	; 0x608 <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
 8c8:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <SoftwarePWM_counter>
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <__vector_10+0x74>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
 8ce:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <TIMER0_callBacks+0x2>
 8d2:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <TIMER0_callBacks+0x3>
 8d6:	30 97       	sbiw	r30, 0x00	; 0
 8d8:	09 f0       	breq	.+2      	; 0x8dc <__vector_10+0x74>
			TIMER0_callBacks[1]();
 8da:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
 8dc:	88 b7       	in	r24, 0x38	; 56
 8de:	82 60       	ori	r24, 0x02	; 2
 8e0:	88 bf       	out	0x38, r24	; 56
}
 8e2:	ff 91       	pop	r31
 8e4:	ef 91       	pop	r30
 8e6:	bf 91       	pop	r27
 8e8:	af 91       	pop	r26
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	7f 91       	pop	r23
 8f0:	6f 91       	pop	r22
 8f2:	5f 91       	pop	r21
 8f4:	4f 91       	pop	r20
 8f6:	3f 91       	pop	r19
 8f8:	2f 91       	pop	r18
 8fa:	0f 90       	pop	r0
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
 904:	1f 92       	push	r1
 906:	0f 92       	push	r0
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	0f 92       	push	r0
 90c:	11 24       	eor	r1, r1
 90e:	2f 93       	push	r18
 910:	3f 93       	push	r19
 912:	4f 93       	push	r20
 914:	5f 93       	push	r21
 916:	6f 93       	push	r22
 918:	7f 93       	push	r23
 91a:	8f 93       	push	r24
 91c:	9f 93       	push	r25
 91e:	af 93       	push	r26
 920:	bf 93       	push	r27
 922:	ef 93       	push	r30
 924:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
 926:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <TIMER1_callBacks+0x4>
 92a:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <TIMER1_callBacks+0x5>
 92e:	30 97       	sbiw	r30, 0x00	; 0
 930:	09 f0       	breq	.+2      	; 0x934 <__vector_7+0x30>
	TIMER1_callBacks[2]();
 932:	09 95       	icall
}
 934:	ff 91       	pop	r31
 936:	ef 91       	pop	r30
 938:	bf 91       	pop	r27
 93a:	af 91       	pop	r26
 93c:	9f 91       	pop	r25
 93e:	8f 91       	pop	r24
 940:	7f 91       	pop	r23
 942:	6f 91       	pop	r22
 944:	5f 91       	pop	r21
 946:	4f 91       	pop	r20
 948:	3f 91       	pop	r19
 94a:	2f 91       	pop	r18
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

00000956 <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
 956:	1f 92       	push	r1
 958:	0f 92       	push	r0
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	0f 92       	push	r0
 95e:	11 24       	eor	r1, r1
 960:	2f 93       	push	r18
 962:	3f 93       	push	r19
 964:	4f 93       	push	r20
 966:	5f 93       	push	r21
 968:	6f 93       	push	r22
 96a:	7f 93       	push	r23
 96c:	8f 93       	push	r24
 96e:	9f 93       	push	r25
 970:	af 93       	push	r26
 972:	bf 93       	push	r27
 974:	ef 93       	push	r30
 976:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
 978:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <TIMER1_callBacks+0x2>
 97c:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <TIMER1_callBacks+0x3>
 980:	30 97       	sbiw	r30, 0x00	; 0
 982:	09 f0       	breq	.+2      	; 0x986 <__vector_8+0x30>
	TIMER1_callBacks[1]();
 984:	09 95       	icall
}
 986:	ff 91       	pop	r31
 988:	ef 91       	pop	r30
 98a:	bf 91       	pop	r27
 98c:	af 91       	pop	r26
 98e:	9f 91       	pop	r25
 990:	8f 91       	pop	r24
 992:	7f 91       	pop	r23
 994:	6f 91       	pop	r22
 996:	5f 91       	pop	r21
 998:	4f 91       	pop	r20
 99a:	3f 91       	pop	r19
 99c:	2f 91       	pop	r18
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
 9a8:	1f 92       	push	r1
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	0f 92       	push	r0
 9b0:	11 24       	eor	r1, r1
 9b2:	2f 93       	push	r18
 9b4:	3f 93       	push	r19
 9b6:	4f 93       	push	r20
 9b8:	5f 93       	push	r21
 9ba:	6f 93       	push	r22
 9bc:	7f 93       	push	r23
 9be:	8f 93       	push	r24
 9c0:	9f 93       	push	r25
 9c2:	af 93       	push	r26
 9c4:	bf 93       	push	r27
 9c6:	ef 93       	push	r30
 9c8:	ff 93       	push	r31
	overflowCounter++;
 9ca:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <overflowCounter>
 9ce:	8f 5f       	subi	r24, 0xFF	; 255
 9d0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
 9d4:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <TIMER1_callBacks>
 9d8:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <TIMER1_callBacks+0x1>
 9dc:	30 97       	sbiw	r30, 0x00	; 0
 9de:	09 f0       	breq	.+2      	; 0x9e2 <__vector_9+0x3a>
		TIMER1_callBacks[0]();
 9e0:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
 9e2:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <TIMER1_storedPreload>
 9e6:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <TIMER1_storedPreload+0x1>
 9ea:	9d bd       	out	0x2d, r25	; 45
 9ec:	8c bd       	out	0x2c, r24	; 44
}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <USART_voidInit>:
	}
}

void USART_voidDisableInterrupt(USART_Interrupt interrupt)
{
	CLR_BIT(UCSRB_REG , interrupt);
 a10:	df 92       	push	r13
 a12:	ef 92       	push	r14
 a14:	ff 92       	push	r15
 a16:	0f 93       	push	r16
 a18:	1f 93       	push	r17
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	d8 2e       	mov	r13, r24
 a20:	16 2f       	mov	r17, r22
 a22:	c4 2f       	mov	r28, r20
 a24:	d2 2f       	mov	r29, r18
 a26:	61 11       	cpse	r22, r1
 a28:	10 c0       	rjmp	.+32     	; 0xa4a <USART_voidInit+0x3a>
 a2a:	0e 94 26 02 	call	0x44c	; 0x44c <CLOCK_u32GetSystemClock>
 a2e:	97 01       	movw	r18, r14
 a30:	22 95       	swap	r18
 a32:	32 95       	swap	r19
 a34:	30 7f       	andi	r19, 0xF0	; 240
 a36:	32 27       	eor	r19, r18
 a38:	20 7f       	andi	r18, 0xF0	; 240
 a3a:	32 27       	eor	r19, r18
 a3c:	40 e0       	ldi	r20, 0x00	; 0
 a3e:	50 e0       	ldi	r21, 0x00	; 0
 a40:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__udivmodsi4>
 a44:	21 50       	subi	r18, 0x01	; 1
 a46:	31 09       	sbc	r19, r1
 a48:	0b c0       	rjmp	.+22     	; 0xa60 <USART_voidInit+0x50>
 a4a:	0e 94 26 02 	call	0x44c	; 0x44c <CLOCK_u32GetSystemClock>
 a4e:	97 01       	movw	r18, r14
 a50:	22 0f       	add	r18, r18
 a52:	33 1f       	adc	r19, r19
 a54:	40 e0       	ldi	r20, 0x00	; 0
 a56:	50 e0       	ldi	r21, 0x00	; 0
 a58:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__udivmodsi4>
 a5c:	21 50       	subi	r18, 0x01	; 1
 a5e:	31 09       	sbc	r19, r1
 a60:	80 b5       	in	r24, 0x20	; 32
 a62:	8f 77       	andi	r24, 0x7F	; 127
 a64:	80 bd       	out	0x20, r24	; 32
 a66:	30 bd       	out	0x20, r19	; 32
 a68:	29 b9       	out	0x09, r18	; 9
 a6a:	dd 0c       	add	r13, r13
 a6c:	dd 0c       	add	r13, r13
 a6e:	dd 0c       	add	r13, r13
 a70:	da b8       	out	0x0a, r13	; 10
 a72:	80 b5       	in	r24, 0x20	; 32
 a74:	80 68       	ori	r24, 0x80	; 128
 a76:	80 bd       	out	0x20, r24	; 32
 a78:	80 e4       	ldi	r24, 0x40	; 64
 a7a:	18 9f       	mul	r17, r24
 a7c:	b0 01       	movw	r22, r0
 a7e:	11 24       	eor	r1, r1
 a80:	80 e1       	ldi	r24, 0x10	; 16
 a82:	d8 9f       	mul	r29, r24
 a84:	90 01       	movw	r18, r0
 a86:	11 24       	eor	r1, r1
 a88:	10 e0       	ldi	r17, 0x00	; 0
 a8a:	00 0f       	add	r16, r16
 a8c:	11 1f       	adc	r17, r17
 a8e:	00 0f       	add	r16, r16
 a90:	11 1f       	adc	r17, r17
 a92:	00 0f       	add	r16, r16
 a94:	11 1f       	adc	r17, r17
 a96:	4c 2f       	mov	r20, r28
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	44 0f       	add	r20, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	60 68       	ori	r22, 0x80	; 128
 aa0:	62 2b       	or	r22, r18
 aa2:	06 2b       	or	r16, r22
 aa4:	40 2b       	or	r20, r16
 aa6:	40 bd       	out	0x20, r20	; 32
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	ff 90       	pop	r15
 ab2:	ef 90       	pop	r14
 ab4:	df 90       	pop	r13
 ab6:	08 95       	ret

00000ab8 <USART_u8RecieveData>:
}

u8 USART_u8RecieveData(void)
{
	/* Wait for data to be received */
	while ( !GET_BIT(UCSRA_REG , 7));
 ab8:	5f 9b       	sbis	0x0b, 7	; 11
 aba:	fe cf       	rjmp	.-4      	; 0xab8 <USART_u8RecieveData>

	return UDR_REG;
 abc:	8c b1       	in	r24, 0x0c	; 12
}
 abe:	08 95       	ret

00000ac0 <USART_voidTransmitChar>:
void USART_voidTransmitChar(u8 data)
{
	/* Wait for empty transmit buffer */
	while (!GET_BIT(UCSRA_REG , 5));
 ac0:	5d 9b       	sbis	0x0b, 5	; 11
 ac2:	fe cf       	rjmp	.-4      	; 0xac0 <USART_voidTransmitChar>
	/* Put data into buffer, sends the data */
	UDR_REG = data;
 ac4:	8c b9       	out	0x0c, r24	; 12
 ac6:	08 95       	ret

00000ac8 <USART_voidTransmitString>:
}
void USART_voidTransmitString(u8* string)
{
 ac8:	0f 93       	push	r16
 aca:	1f 93       	push	r17
 acc:	cf 93       	push	r28
 ace:	8c 01       	movw	r16, r24
	u8 i = 0;
 ad0:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i] != '\0')
 ad2:	03 c0       	rjmp	.+6      	; 0xada <USART_voidTransmitString+0x12>
	{
		USART_voidTransmitChar(string[i]);
 ad4:	0e 94 60 05 	call	0xac0	; 0xac0 <USART_voidTransmitChar>
		i++;
 ad8:	cf 5f       	subi	r28, 0xFF	; 255
	UDR_REG = data;
}
void USART_voidTransmitString(u8* string)
{
	u8 i = 0;
	while(string[i] != '\0')
 ada:	f8 01       	movw	r30, r16
 adc:	ec 0f       	add	r30, r28
 ade:	f1 1d       	adc	r31, r1
 ae0:	80 81       	ld	r24, Z
 ae2:	81 11       	cpse	r24, r1
 ae4:	f7 cf       	rjmp	.-18     	; 0xad4 <USART_voidTransmitString+0xc>
	{
		USART_voidTransmitChar(string[i]);
		i++;
	}
}
 ae6:	cf 91       	pop	r28
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	08 95       	ret

00000aee <__vector_13>:

void USART_ISR_RECIEVE_COMPLETE(void)
{
 aee:	1f 92       	push	r1
 af0:	0f 92       	push	r0
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	0f 92       	push	r0
 af6:	11 24       	eor	r1, r1
 af8:	2f 93       	push	r18
 afa:	3f 93       	push	r19
 afc:	4f 93       	push	r20
 afe:	5f 93       	push	r21
 b00:	6f 93       	push	r22
 b02:	7f 93       	push	r23
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	ef 93       	push	r30
 b0e:	ff 93       	push	r31
	if (*USART_recieveCallBack != 0)
 b10:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <USART_recieveCallBack>
 b14:	f0 91 d9 00 	lds	r31, 0x00D9	; 0x8000d9 <USART_recieveCallBack+0x1>
 b18:	30 97       	sbiw	r30, 0x00	; 0
 b1a:	11 f0       	breq	.+4      	; 0xb20 <__vector_13+0x32>
	{
		USART_recieveCallBack(UDR_REG);
 b1c:	8c b1       	in	r24, 0x0c	; 12
 b1e:	09 95       	icall
	}
}
 b20:	ff 91       	pop	r31
 b22:	ef 91       	pop	r30
 b24:	bf 91       	pop	r27
 b26:	af 91       	pop	r26
 b28:	9f 91       	pop	r25
 b2a:	8f 91       	pop	r24
 b2c:	7f 91       	pop	r23
 b2e:	6f 91       	pop	r22
 b30:	5f 91       	pop	r21
 b32:	4f 91       	pop	r20
 b34:	3f 91       	pop	r19
 b36:	2f 91       	pop	r18
 b38:	0f 90       	pop	r0
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	0f 90       	pop	r0
 b3e:	1f 90       	pop	r1
 b40:	18 95       	reti

00000b42 <__vector_15>:

void USART_ISR_TRANSMIT_COMPLETE(void)
{
 b42:	1f 92       	push	r1
 b44:	0f 92       	push	r0
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	0f 92       	push	r0
 b4a:	11 24       	eor	r1, r1
 b4c:	2f 93       	push	r18
 b4e:	3f 93       	push	r19
 b50:	4f 93       	push	r20
 b52:	5f 93       	push	r21
 b54:	6f 93       	push	r22
 b56:	7f 93       	push	r23
 b58:	8f 93       	push	r24
 b5a:	9f 93       	push	r25
 b5c:	af 93       	push	r26
 b5e:	bf 93       	push	r27
 b60:	ef 93       	push	r30
 b62:	ff 93       	push	r31
	if (USART_callBacks[1] != 0)
 b64:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <USART_callBacks+0x2>
 b68:	f0 91 dd 00 	lds	r31, 0x00DD	; 0x8000dd <USART_callBacks+0x3>
 b6c:	30 97       	sbiw	r30, 0x00	; 0
 b6e:	09 f0       	breq	.+2      	; 0xb72 <__vector_15+0x30>
	{
		USART_callBacks[1]();
 b70:	09 95       	icall
	}
}
 b72:	ff 91       	pop	r31
 b74:	ef 91       	pop	r30
 b76:	bf 91       	pop	r27
 b78:	af 91       	pop	r26
 b7a:	9f 91       	pop	r25
 b7c:	8f 91       	pop	r24
 b7e:	7f 91       	pop	r23
 b80:	6f 91       	pop	r22
 b82:	5f 91       	pop	r21
 b84:	4f 91       	pop	r20
 b86:	3f 91       	pop	r19
 b88:	2f 91       	pop	r18
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <__vector_14>:
void USART_ISR_REGISTER_EMPTY(void)
{
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	2f 93       	push	r18
 ba0:	3f 93       	push	r19
 ba2:	4f 93       	push	r20
 ba4:	5f 93       	push	r21
 ba6:	6f 93       	push	r22
 ba8:	7f 93       	push	r23
 baa:	8f 93       	push	r24
 bac:	9f 93       	push	r25
 bae:	af 93       	push	r26
 bb0:	bf 93       	push	r27
 bb2:	ef 93       	push	r30
 bb4:	ff 93       	push	r31
	if (USART_callBacks[0] != 0)
 bb6:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <USART_callBacks>
 bba:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <USART_callBacks+0x1>
 bbe:	30 97       	sbiw	r30, 0x00	; 0
 bc0:	09 f0       	breq	.+2      	; 0xbc4 <__vector_14+0x30>
	{
		USART_callBacks[0]();
 bc2:	09 95       	icall
	}
}
 bc4:	ff 91       	pop	r31
 bc6:	ef 91       	pop	r30
 bc8:	bf 91       	pop	r27
 bca:	af 91       	pop	r26
 bcc:	9f 91       	pop	r25
 bce:	8f 91       	pop	r24
 bd0:	7f 91       	pop	r23
 bd2:	6f 91       	pop	r22
 bd4:	5f 91       	pop	r21
 bd6:	4f 91       	pop	r20
 bd8:	3f 91       	pop	r19
 bda:	2f 91       	pop	r18
 bdc:	0f 90       	pop	r0
 bde:	0f be       	out	0x3f, r0	; 63
 be0:	0f 90       	pop	r0
 be2:	1f 90       	pop	r1
 be4:	18 95       	reti

00000be6 <__udivmodsi4>:
 be6:	a1 e2       	ldi	r26, 0x21	; 33
 be8:	1a 2e       	mov	r1, r26
 bea:	aa 1b       	sub	r26, r26
 bec:	bb 1b       	sub	r27, r27
 bee:	fd 01       	movw	r30, r26
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <__udivmodsi4_ep>

00000bf2 <__udivmodsi4_loop>:
 bf2:	aa 1f       	adc	r26, r26
 bf4:	bb 1f       	adc	r27, r27
 bf6:	ee 1f       	adc	r30, r30
 bf8:	ff 1f       	adc	r31, r31
 bfa:	a2 17       	cp	r26, r18
 bfc:	b3 07       	cpc	r27, r19
 bfe:	e4 07       	cpc	r30, r20
 c00:	f5 07       	cpc	r31, r21
 c02:	20 f0       	brcs	.+8      	; 0xc0c <__udivmodsi4_ep>
 c04:	a2 1b       	sub	r26, r18
 c06:	b3 0b       	sbc	r27, r19
 c08:	e4 0b       	sbc	r30, r20
 c0a:	f5 0b       	sbc	r31, r21

00000c0c <__udivmodsi4_ep>:
 c0c:	66 1f       	adc	r22, r22
 c0e:	77 1f       	adc	r23, r23
 c10:	88 1f       	adc	r24, r24
 c12:	99 1f       	adc	r25, r25
 c14:	1a 94       	dec	r1
 c16:	69 f7       	brne	.-38     	; 0xbf2 <__udivmodsi4_loop>
 c18:	60 95       	com	r22
 c1a:	70 95       	com	r23
 c1c:	80 95       	com	r24
 c1e:	90 95       	com	r25
 c20:	9b 01       	movw	r18, r22
 c22:	ac 01       	movw	r20, r24
 c24:	bd 01       	movw	r22, r26
 c26:	cf 01       	movw	r24, r30
 c28:	08 95       	ret

00000c2a <strcmp>:
 c2a:	fb 01       	movw	r30, r22
 c2c:	dc 01       	movw	r26, r24
 c2e:	8d 91       	ld	r24, X+
 c30:	01 90       	ld	r0, Z+
 c32:	80 19       	sub	r24, r0
 c34:	01 10       	cpse	r0, r1
 c36:	d9 f3       	breq	.-10     	; 0xc2e <strcmp+0x4>
 c38:	99 0b       	sbc	r25, r25
 c3a:	08 95       	ret

00000c3c <_exit>:
 c3c:	f8 94       	cli

00000c3e <__stop_program>:
 c3e:	ff cf       	rjmp	.-2      	; 0xc3e <__stop_program>
